//a
#opcio 1 -> no filtrem repetits entre llistes
MATCH (i:INDIVIDUAL)-[v:VIU]->()
WHERE v.Location="SFLL"
WITH DISTINCT v.Year as Year, size(collect(i)) AS Habitants, collect(DISTINCT i.surname) + collect(DISTINCT i.second_surname) AS CognomsSenseFiltre
WITH Year, Habitants, [cognom IN CognomsSenseFiltre WHERE cognom <> "nan"] AS Cognoms
RETURN Year, Habitants, Cognoms
ORDER BY Year

#opcio 2 -> fem dues llistes (ineficient)
MATCH (i:INDIVIDUAL)-[v:VIU]->()
WHERE v.Location="SFLL"
WITH DISTINCT v.Year as Year, size(collect(i)) AS Habitants, collect(DISTINCT i.surname) + collect(DISTINCT i.second_surname) AS CognomsSenseFiltre
WITH Year, Habitants, [cognom IN CognomsSenseFiltre WHERE cognom <> "nan" | cognom] AS CognomsSenseDistinct
WITH Year, Habitants, COLLECT(DISTINCT CognomsSenseDistinct) AS Cognoms
RETURN Year, Habitants, head(Cognoms)
ORDER BY Year;

//b
#uso del indice de texto:
CALL db.index.fulltext.queryNodes('IndividualNameIndex', 'Juan Magan Rodr√≠guez')
YIELD node, score
RETURN id(node), node.name, node.surname, node.second_surname, score;

//c - FUNCIONA
CALL{
    CALL db.index.fulltext.queryNodes('IndividuNomCognoms', 'benito julivert')
    YIELD node, score
    WITH node, score
    ORDER BY score DESC
    RETURN node
    LIMIT 1
} 
WITH node
MATCH (n:INDIVIDUAL)-[f:FAMILIA]-(m:INDIVIDUAL) 
WHERE n = node AND f.Relacio IN ["hija", "hijo"]
RETURN m.name, m.surname, m.second_surname, f.Relacio
ORDER BY m.name
